//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Computers.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ComputersEntities : DbContext
    {
        public ComputersEntities()
            : base("name=ComputersEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Computer> Computers { get; set; }
        public virtual DbSet<Cpu> Cpus { get; set; }
        public virtual DbSet<Gpu> Gpus { get; set; }
        public virtual DbSet<StorageDevice> StorageDevices { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
    
        public virtual ObjectResult<usp_GetComputersWithGpuAndRamBetween_Result> usp_GetComputersWithGpuAndRamBetween(Nullable<int> cpuId, Nullable<int> minRam, Nullable<int> maxRam)
        {
            var cpuIdParameter = cpuId.HasValue ?
                new ObjectParameter("CpuId", cpuId) :
                new ObjectParameter("CpuId", typeof(int));
    
            var minRamParameter = minRam.HasValue ?
                new ObjectParameter("MinRam", minRam) :
                new ObjectParameter("MinRam", typeof(int));
    
            var maxRamParameter = maxRam.HasValue ?
                new ObjectParameter("MaxRam", maxRam) :
                new ObjectParameter("MaxRam", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetComputersWithGpuAndRamBetween_Result>("usp_GetComputersWithGpuAndRamBetween", cpuIdParameter, minRamParameter, maxRamParameter);
        }
    
        public virtual ObjectResult<usp_GetComputersWithRamBetween_Result> usp_GetComputersWithRamBetween(Nullable<int> minRam, Nullable<int> maxRam)
        {
            var minRamParameter = minRam.HasValue ?
                new ObjectParameter("MinRam", minRam) :
                new ObjectParameter("MinRam", typeof(int));
    
            var maxRamParameter = maxRam.HasValue ?
                new ObjectParameter("MaxRam", maxRam) :
                new ObjectParameter("MaxRam", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetComputersWithRamBetween_Result>("usp_GetComputersWithRamBetween", minRamParameter, maxRamParameter);
        }
    
        public virtual ObjectResult<usp_GetGpusForComputerType_Result> usp_GetGpusForComputerType(string computerType)
        {
            var computerTypeParameter = computerType != null ?
                new ObjectParameter("ComputerType", computerType) :
                new ObjectParameter("ComputerType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetGpusForComputerType_Result>("usp_GetGpusForComputerType", computerTypeParameter);
        }
    }
}
